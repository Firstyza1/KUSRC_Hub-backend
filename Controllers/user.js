const db = require("../db");
const cloudinary = require("../cloudinary");
const fs = require("fs");
const path = require("path");
exports.userProfile = async (req, res) => {
  try {
    const { user_id } = req.params; // ‡∏£‡∏±‡∏ö user_id ‡∏à‡∏≤‡∏Å URL parameter

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á user_id ‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!user_id) {
      return res.status(400).json({ message: "User ID is required" });
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á users
    const query = `
      SELECT user_id, email, username, user_profile, created_at, updated_at 
      FROM users 
      WHERE user_id = $1
    `;
    const result = await db.query(query, [user_id]);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (result.rows.length === 0) {
      return res.status(404).json({ message: "User not found" });
    }

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON
    res.status(200).json({
      user: result.rows[0], // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    });
  } catch (error) {
    console.error("Error retrieving user profile:", error);
    res.status(500).json({
      message: "An error occurred while retrieving user profile",
      error: error.message,
    });
  }
};

exports.updateUserProfile = async (req, res) => {
  try {
    const { user_id } = req.params;
    const { username } = req.body;

    if (!user_id) {
      return res.status(400).json({ message: "User ID is required" });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ username ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (username) {
      const usernameCheckQuery = `SELECT username FROM users WHERE username = $1 AND user_id <> $2`;
      const usernameCheckResult = await db.query(usernameCheckQuery, [
        username,
        user_id,
      ]);

      if (usernameCheckResult.rows.length > 0) {
        return res
          .status(400)
          .json({ message: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ñ‡∏ô‡πÉ‡∏ä‡πâ‡πÄ‡πÄ‡∏•‡πâ‡∏ß ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∑‡πà‡∏ô" });
      }
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const oldProfileQuery = `SELECT user_profile FROM users WHERE user_id = $1`;
    const oldProfileResult = await db.query(oldProfileQuery, [user_id]);

    let oldProfileImageUrl = oldProfileResult.rows[0]?.user_profile || null;
    let profileImageUrl = oldProfileImageUrl;

    if (req.file) {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå (‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞ JPG ‡πÅ‡∏•‡∏∞ PNG)
      if (!["image/jpeg", "image/png"].includes(req.file.mimetype)) {
        fs.unlinkSync(req.file.path); // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
        return res
          .status(400)
          .json({ message: " ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏ûJPG ‡∏´‡∏£‡∏∑‡∏≠ PNG ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô" });
      }

      // üîπ ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
      if (oldProfileImageUrl) {
        // ‡∏î‡∏∂‡∏á `public_id` ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏≤‡∏Å URL
        const publicId = oldProfileImageUrl.split("/").pop().split(".")[0]; // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å URL ‡∏ó‡∏µ‡πà Cloudinary ‡πÉ‡∏´‡πâ‡∏°‡∏≤

        await cloudinary.uploader.destroy(`UserProfile/${publicId}`);
      }

      // üîπ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡∏ó‡∏µ‡πà Cloudinary
      const result = await cloudinary.uploader.upload(req.file.path, {
        folder: "UserProfile",
        upload_preset: "UserProfile",
      });

      profileImageUrl = result.secure_url;
      fs.unlinkSync(req.file.path); // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const updateQuery = `
      UPDATE users 
      SET 
        username = COALESCE($1, username), 
        user_profile = COALESCE($2, user_profile), 
        updated_at = NOW()
      WHERE user_id = $3
      RETURNING user_id, username, user_profile, updated_at;
    `;

    const values = [username || null, profileImageUrl || null, user_id];
    const updateResult = await db.query(updateQuery, values);

    if (updateResult.rowCount === 0) {
      return res
        .status(404)
        .json({ message: "User not found or no changes made" });
    }

    res.status(200).json({
      message: "User profile updated successfully",
      user: updateResult.rows[0],
    });
  } catch (error) {
    console.error("Error updating user profile:", error);
    res.status(500).json({
      message: "An error occurred while updating user profile",
      error: error.message,
    });
  }
};
