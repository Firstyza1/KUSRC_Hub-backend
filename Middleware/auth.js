const jwt = require("jsonwebtoken");

exports.auth = async (req, res, next) => {
  try {
    // ‡∏£‡∏±‡∏ö‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏à‡∏≤‡∏Å Header
    const token = req.headers["authtoken"];

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!token) {
      return res.status(401).send("No token provided");
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ "Bearer " ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!token.startsWith("Bearer ")) {
      return res.status(401).send("Invalid token format");
    }

    // ‡πÅ‡∏¢‡∏Å‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å "Bearer "
    const tokenWithoutBearer = token.split(" ")[1];

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô
    const decoded = jwt.verify(tokenWithoutBearer, "jwtsecret");
    req.user = decoded; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡πÑ‡∏ß‡πâ‡πÉ‡∏ô req.user

    next(); // ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ
  } catch (err) {
    console.log(err);

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Client
    if (err.name === "JsonWebTokenError") {
      return res.status(401).send("Invalid token");
    } else if (err.name === "TokenExpiredError") {
      return res.status(401).send("Token expired");
    } else {
      return res.status(500).send("Internal server error");
    }
  }
};

exports.adminAuth = (req, res, next) => {
  if (req.user.role !== "admin") {
    return res.status(403).json({ message: "Access denied: Admins only" });
  }
  next();
};

exports.isOwnerOrAdmin = (req, res, next) => {
  const { user_id } = req.params; // ‡∏£‡∏±‡∏ö user_id ‡∏à‡∏≤‡∏Å URL
  const loggedInUser = req.user; // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏à‡∏≤‡∏Å token ‡∏ó‡∏µ‡πà auth middleware ‡πÅ‡∏ô‡∏ö‡πÉ‡∏´‡πâ

  // Log ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≤ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  console.log("üîç loggedInUser:", loggedInUser);
  console.log("üîç user_id from params:", user_id);

  // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!loggedInUser) {
    return res.status(401).json({ message: "Unauthorized" });
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤ user_id ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô string ‡∏´‡∏£‡∏∑‡∏≠ number ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
  if (loggedInUser.id === parseInt(user_id) || loggedInUser.role === "admin") {
    return next();
  }

  return res.status(403).json({ message: "Access denied" });
};